{
  "name": "loopback-connector-mysql",
  "version": "3.0.0",
  "description": "MySQL connector for loopback-datasource-juggler",
  "engines": {
    "node": ">=4"
  },
  "main": "index.js",
  "scripts": {
    "pretest": "node pretest.js",
    "lint": "eslint .",
    "test": "mocha --timeout 10000 test/*.js",
    "posttest": "npm run lint"
  },
  "dependencies": {
    "async": "^0.9.0",
    "debug": "^2.1.1",
    "loopback-connector": "^2.4.0",
    "mysql": "^2.11.1",
    "strong-globalize": "^2.5.8"
  },
  "devDependencies": {
    "bluebird": "~2.9.10",
    "eslint": "^2.13.1",
    "eslint-config-loopback": "^4.0.0",
    "loopback-datasource-juggler": "^3.0.0",
    "mocha": "^2.1.0",
    "rc": "^1.0.0",
    "should": "^8.0.2",
    "sinon": "^1.15.4"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/strongloop/loopback-connector-mysql.git"
  },
  "license": "MIT",
  "readme": "# loopback-connector-mysql\n\n[MySQL](https://www.mysql.com/) is a popular open-source relational database management system (RDBMS).  The `loopback-connector-mysql` module provides the MySQL connector module for the LoopBack framework.\n\n<div class=\"gh-only\">See also <a href=\"http://loopback.io/doc/en/lb3/MySQL-connector.html\">LoopBack MySQL Connector</a> in LoopBack documentation.\n<br/><br/>\n<b>NOTE</b>: The MySQL connector requires MySQL 5.0+.\n</div>\n\n## Installation\n\nIn your application root directory, enter this command to install the connector:\n\n```sh\nnpm install loopback-connector-mysql --save\n```\n\nThis installs the module from npm and adds it as a dependency to the application's `package.json` file.\n\nIf you create a MySQL data source using the data source generator as described below, you don't have to do this, since the generator will run `npm install` for you.\n\n## Creating a MySQL data source\n\nUse the [Data source generator](http://loopback.io/doc/en/lb3/Data-source-generator.html) to add a MySQL data source to your application.  \nThe generator will prompt for the database server hostname, port, and other settings\nrequired to connect to a MySQL database.  It will also run the `npm install` command above for you.\n\nThe entry in the application's `/server/datasources.json` will look like this:\n\n{% include code-caption.html content=\"/server/datasources.json\" %}\n```javascript\n\"mydb\": {\n  \"name\": \"mydb\",\n  \"connector\": \"mysql\",\n  \"host\": \"myserver\",\n  \"port\": 3306,\n  \"database\": \"mydb\",\n  \"password\": \"mypassword\",\n  \"user\": \"admin\"\n }\n```\n\nEdit `datasources.json` to add any other additional properties that you require.\n\n### Properties\n\n<table>\n  <thead>\n    <tr>\n      <th width=\"150\">Property</th>\n      <th width=\"80\">Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>collation</td>\n      <td>String</td>\n      <td>Determines the charset for the connection.  Default is utf8_general_ci.</td>\n    </tr>\n    <tr>\n      <td>connector</td>\n      <td>String</td>\n      <td>Connector name, either “loopback-connector-mysql” or “mysql”.</td>\n    </tr>\n    <tr>\n      <td>connectionLimit</td>\n      <td>Number</td>\n      <td>The maximum number of connections to create at once.  Default is 10.</td>\n    </tr>\n    <tr>\n      <td>database</td>\n      <td>String</td>\n      <td>Database name</td>\n    </tr>\n    <tr>\n      <td>debug</td>\n      <td>Boolean</td>\n      <td>If true, turn on verbose mode to debug database queries and lifecycle.</td>\n    </tr>\n    <tr>\n      <td>host</td>\n      <td>String</td>\n      <td>Database host name</td>\n    </tr>\n    <tr>\n      <td>password</td>\n      <td>String</td>\n      <td>Password to connect to database</td>\n    </tr>\n    <tr>\n      <td>port</td>\n      <td>Number</td>\n      <td>Database TCP port</td>\n    </tr>\n    <tr>\n      <td>socketPath</td>\n      <td>String</td>\n      <td>The path to a unix domain socket to connect to. When used host and port are ignored.</td>\n    </tr>\n    <tr>\n      <td>supportBigNumbers</td>\n      <td>Boolean</td>\n      <td>Enable this option to deal with big numbers (BIGINT and DECIMAL columns) in the database. Default is false.</td>\n    </tr>\n    <tr>\n      <td>timeZone</td>\n      <td>String</td>\n      <td>The timezone used to store local dates.  Default is ‘local’.</td>\n    </tr>\n    <tr>\n      <td>url</td>\n      <td>String</td>\n      <td>Connection URL of form <code>mysql://user:password@host/db</code>.  Overrides other connection settings.</td>\n    </tr>\n    <tr>\n      <td>username</td>\n      <td>String</td>\n      <td>Username to connect to database</td>\n    </tr>\n  </tbody>\n</table>\n\n**NOTE**: In addition to these properties, you can use additional parameters supported by [`node-mysql`](https://github.com/felixge/node-mysql).\n\n## Type mappings\n\nSee [LoopBack types](http://loopback.io/doc/en/lb3/LoopBack-types.html) for details on LoopBack's data types.\n\n### LoopBack to MySQL types\n\n<table>\n  <thead>\n    <tr>\n      <th>LoopBack Type</th>\n      <th>MySQL Type</th>\n    </tr>\n  </thead>\n  <tbody>    \n    <tr>\n      <td>String/JSON</td>\n      <td>VARCHAR</td>\n    </tr>\n    <tr>\n      <td>Text</td>\n      <td>TEXT</td>\n    </tr>\n    <tr>\n      <td>Number</td>\n      <td>INT</td>\n    </tr>\n    <tr>\n      <td>Date</td>\n      <td>DATETIME</td>\n    </tr>\n    <tr>\n      <td>Boolean</td>\n      <td>TINYINT(1)</td>\n    </tr>\n    <tr>\n      <td><a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint\" class=\"external-link\">GeoPoint</a> object</td>\n      <td>POINT</td>\n    </tr>\n    <tr>\n      <td>Custom Enum type<br>(See <a href=\"#enum\">Enum</a> below)</td>\n      <td>ENUM</td>\n    </tr>\n  </tbody>\n</table>\n\n### MySQL to LoopBack types\n\n<table>\n  <tbody>\n    <tr>\n      <th>MySQL Type</th>\n      <th>LoopBack Type</th>\n    </tr>\n    <tr>\n      <td>CHAR</td>\n      <td>String</td>\n    </tr>\n    <tr>\n      <td>CHAR(1)</td>\n      <td>Boolean</td>\n    </tr>\n    <tr>\n      <td>VARCHAR<br>TINYTEXT<br>MEDIUMTEXT<br>LONGTEXT<br>TEXT<br>ENUM<br>SET</td>\n      <td>String</td>\n    </tr>\n    <tr>\n      <td>TINYBLOB<br>MEDIUMBLOB<br>LONGBLOB<br>BLOB<br>BINARY<br>VARBINARY<br>BIT</td>\n      <td>Node.js <a href=\"http://nodejs.org/api/buffer.html\">Buffer object</a></td>\n    </tr>\n    <tr>\n      <td>TINYINT<br>SMALLINT<br>INT<br>MEDIUMINT<br>YEAR<br>FLOAT<br>DOUBLE<br>NUMERIC<br>DECIMAL</td>\n      <td>\n        <p>Number<br>For FLOAT and DOUBLE, see <a href=\"#floating-point-types\">Floating-point types</a>. </p>\n        <p>For NUMERIC and DECIMAL, see <a href=\"MySQL-connector.html\">Fixed-point exact value types</a></p>\n      </td>\n    </tr>\n    <tr>\n      <td>DATE<br>TIMESTAMP<br>DATETIME</td>\n      <td>Date</td>\n    </tr>\n  </tbody>\n</table>\n\n## Using the datatype field/column option with MySQL\n\nUse the `mysql` model property to specify additional MySQL-specific properties for a LoopBack model.\n\nFor example:\n\n{% include code-caption.html content=\"/common/models/model.json\" %}\n```javascript\n\"locationId\":{\n    \"type\":\"String\",\n    \"required\":true,\n    \"length\":20,\n    \"mysql\":\n    {\n        \"columnName\":\"LOCATION_ID\",\n        \"dataType\":\"VARCHAR2\",\n        \"dataLength\":20,\n        \"nullable\":\"N\"\n    }\n}\n```\n\nYou can also use the dataType column/property attribute to specify what MySQL column type to use for many loopback-datasource-juggler types. \nThe following type-dataType combinations are supported:\n\n* Number\n* integer\n* tinyint\n* smallint\n* mediumint\n* int\n* bigint\n\nUse the `limit` option to alter the display width. Example:\n\n```javascript\n{ userName : {\n    type: String,\n    dataType: 'char',\n    limit: 24\n  }\n}\n```\n\n### Floating-point types\n\nFor Float and Double data types, use the `precision` and `scale` options to specify custom precision. Default is (16,8). For example:\n\n```javascript\n{ average :\n  { type: Number,\n    dataType: 'float',\n    precision: 20,\n    scale: 4\n  }\n}\n```\n\n### Fixed-point exact value types\n\nFor Decimal and Numeric types, use the `precision` and `scale` options to specify custom precision. Default is (9,2).\nThese aren't likely to function as true fixed-point.\n\nExample:\n\n```javascript\n{ stdDev :\n  { type: Number, \n    dataType: 'decimal',\n    precision: 12,\n    scale: 8\n  }\n}\n```\n\n### Other types\n\nConvert String / DataSource.Text / DataSource.JSON to the following MySQL types:\n\n* varchar\n* char\n* text\n* mediumtext\n* tinytext\n* longtext\n\nExample: \n\n```javascript\n{ userName :\n  { type: String,\n    dataType: 'char',\n    limit: 24\n  }\n}\n```\n\nExample: \n\n```javascript\n{ biography :\n  { type: String,\n  dataType: 'longtext'\n  }\n}\n```\n\nConvert JSON Date types to  datetime or timestamp\n\nExample: \n\n```javascript\n{ startTime :\n  { type: Date,\n    dataType: 'timestamp'\n  }\n}\n```\n\n### Enum\n\nEnums are special. Create an Enum using Enum factory:\n\n```javascript\nvar MOOD = dataSource.EnumFactory('glad', 'sad', 'mad'); \nMOOD.SAD; // 'sad' \nMOOD(2); // 'sad' \nMOOD('SAD'); // 'sad' \nMOOD('sad'); // 'sad'\n{ mood: { type: MOOD }}\n{ choice: { type: dataSource.EnumFactory('yes', 'no', 'maybe'), null: false }}\n```\n\n## Discovery and auto-migration\n\n### Model discovery\n\nThe MySQL connector supports _model discovery_ that enables you to create LoopBack models\nbased on an existing database schema using the unified [database discovery API](http://apidocs.strongloop.com/loopback-datasource-juggler/#datasource-prototype-discoverandbuildmodels).  For more information on discovery, see [Discovering models from relational databases](https://loopback.io/doc/en/lb3/Discovering-models-from-relational-databases.html).\n\n### Auto-migratiion\n\nThe MySQL connector also supports _auto-migration_ that enables you to create a database schema\nfrom LoopBack models using the [LoopBack automigrate method](http://apidocs.strongloop.com/loopback-datasource-juggler/#datasource-prototype-automigrate).\n\nFor more information on auto-migration, see [Creating a database schema from models](https://loopback.io/doc/en/lb3/Creating-a-database-schema-from-models.html) for more information.\n\nDestroying models may result in errors due to foreign key integrity. First delete any related models first calling delete on models with relationships.\n\n## Running tests\n\nThe tests in this repository are mainly integration tests, meaning you will need to run them using our preconfigured test server.\n\n1. Ask a core developer for instructions on how to set up test server credentials on your machine\n2. `npm test`\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/strongloop/loopback-connector-mysql/issues"
  },
  "_id": "loopback-connector-mysql@3.0.0",
  "_from": "loopback-connector-mysql@"
}
